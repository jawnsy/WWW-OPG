package WWW::OPG;
# ABSTRACT: Perl interface to OPG's power generation statistics

use strict;
use warnings;
use Carp ();

use LWP::UserAgent;
use DateTime;

=head1 SYNOPSIS

  use WWW::OPG;

  my $opg = WWW::OPG->new();
  eval {
    $opg->poll();
  };
  print "Currently generating ", $opg->power, "MW of electricity\n";

=head1 DESCRIPTION

This module provides a Perl interface to information published on Ontario
Power Generation's web site at L<http://www.opg.com>. This module provides
very quick and low-bandwidth queries using the special machine-readable file
proffered by OPG; see L<http://www.opg.com/megafile.txt>.

=head1 COMPATIBILITY

This module was tested under Perl 5.10.1, using Debian Linux. However, because
it's Pure Perl and doesn't do anything too obscure, it should be compatible
with any version of Perl that supports its prerequisite modules.

If you encounter any problems on a different version or architecture, please
contact the maintainer.

=head1 METHODS

=head2 new

  WWW::OPG->new( \%params )

Initialize a C<WWW::OPG> object, setting up the user agent and preparing
for a transaction. Note that you can pass a L<LWP::UserAgent> object or a
subclass thereof, which can include your proxy or UserAgent settings.

Example code:

  my $opg = WWW::OPG->new();
  # or, with some parameters:
  my $opg = WWW::OPG->new({
    useragent => LWP::UserAgent->new()
  });

This method will return an appropriate B<WWW::OPG> object or throw an
exception on error.

=cut

sub new {
  my ($class, $params) = @_;

  Carp::croak('You must call this as a class method') if ref($class);

  my $self = {
  };

  if (exists $params->{useragent}) {
    $self->{useragent} = $params->{useragent};
  }
  else {
    my $ua = LWP::UserAgent->new;
    $ua->agent($class . '/' . $class->VERSION . ' ' . $ua->_agent);
    $self->{useragent} = $ua;
  }

  bless($self, $class);
  return $self;
}

=head2 poll

  $opg->poll()

Update data in the C<WWW::OPG> object, C<$obj>, by connecting to the OPG
site and scraping data. The data can then be extracted using the other
methods available in this class.

Example code:

  $opg->poll();

This method will return a true value if an update has been performed, a
false value if the data is unchanged since the last update, or throw an
exception on error.

=cut

sub poll {
  my ($self) = @_;

  Carp::croak('You must call this method as an object') unless ref($self);

  my $ua = $self->{useragent};
  my $r = $ua->get('http://www.opg.com/megafile.txt');

  Carp::croak('Error reading response: ' . $r->status_line)
    unless $r->is_success;

  my ($power, $date) = split(chr(13) . chr(10), $r->content);

  if ($power =~ m{^\s*([0-9]+),?([0-9]+)$})
  {
    $self->{power} = $1 . $2;

    if ($date =~ m{^(\d+)/(\d+)/(\d+) (\d+):(\d+):(\d+) (AM|PM)})
    {
      my $hour = $4;
      # 12:00 noon and midnight are a special case
      if ($hour == 12) {
        # 12am is midnight
        if ($7 eq 'AM') {
          $hour = 0;
        }
      }
      elsif ($7 eq 'PM') {
        $hour += 12;
      }

      my $dt = DateTime->new(
        month     => $1,
        day       => $2,
        year      => $3,
        hour      => $hour, # derived from $4
        minute    => $5,
        second    => $6,
        time_zone => 'America/Toronto',
      );

      if (!exists $self->{updated} || $self->{updated} != $dt)
      {
        $self->{updated} = $dt;
        return 1;
      }
      return 0;
    }
  }

  die 'Error parsing response, perhaps the format has changed?';
  return;
}

=head2 power

  $opg->power()

Returns the amount of power being generated by Ontario Power Generation
(OPG) plants, in MegaWatts (MW).

Example code:

  $opg->poll();
  print "Currently generating ", $opg->power, " MW for Ontario\n";

Note that this value may be undefined if the server has not yet been polled,
or if there was a failure polling.

=cut

sub power {
  my ($self) = @_;

  Carp::croak('You must call this method as an object') unless ref($self);

  return unless exists $self->{power};
  return $self->{power};
}

=head2 last_updated

  $opg->last_updated()

Returns the date and time that the data was last updated (as defined by the
remote OPG web server), given as a L<DateTime> object.

Example code:

  $opg->poll();
  print "Last updated ", $opg->last_updated, "\n";

=cut

sub last_updated {
  my ($self) = @_;

  Carp::croak('You must call this method as an object') unless ref($self);

  return unless exists $self->{updated};
  return $self->{updated};
}

=head1 ACKNOWLEDGEMENTS

=over

=item *

Thanks to the kind folks at OPG and in particular someone I know only as
"Rose" E<lt>webmaster@opg.comE<gt> for providing me with an API in the form
of a small text file which provides the same data as that scraped from the
web page itself. This cuts down significantly on bandwidth costs and the
time it takes to check the data.

=back

=head1 SEE ALSO

L<http://www.opg.com>, the Ontario Power Generation web site.

=head1 CAVEATS

=head2 KNOWN BUGS

There are no known bugs as of this release.

=head2 LIMITATIONS

=over

=item *

The only data currently easily available from the Ontario Power Generation
web site is the data for power currently being generated for the province
of Ontario, in MegaWatts (MW). This data seems to be updated every five
minutes.

=back

=cut

1;
